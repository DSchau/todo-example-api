openapi: 3.0.3
security:
  - ApiKeyAuth: []
info:
  title: Todo List API
  description: A simple API to manage projects and their associated todos.
  version: 1.0.0

servers:
  - url: https://todo-api-example.fly.dev

paths:
  /login:
    post:
      summary: Log in and get a JWT token
      security:
        - BasicAuth: []
      responses:
        '200':
          description: JWT token returned on success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'

  /projects:
    get:
      summary: List all projects
      responses:
        '200':
          description: A list of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        '500':
          $ref: '#/components/responses/ServerError'

    post:
      summary: Create a new project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectInput'
      responses:
        '201':
          description: Project created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '500':
          $ref: '#/components/responses/ServerError'

  /projects/{projectId}:
    get:
      summary: Get a specific project
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      responses:
        '200':
          description: The requested project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          description: Project not found
        '500':
          $ref: '#/components/responses/ServerError'

    put:
      summary: Update a project
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectInput'
      responses:
        '200':
          description: Project updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      summary: Delete a project
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      responses:
        '204':
          description: Project deleted
        '500':
          $ref: '#/components/responses/ServerError'

  /projects/{projectId}/todos:
    get:
      summary: List all todos for a project
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      responses:
        '200':
          description: A list of todos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Todo'
        '500':
          $ref: '#/components/responses/ServerError'

    post:
      summary: Create a new todo in a project
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoInput'
      responses:
        '201':
          description: Todo created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '500':
          $ref: '#/components/responses/ServerError'

  /todos:
    get:
      summary: List all todos
      responses:
        '200':
          description: A list of all todos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Todo'
        '500':
          $ref: '#/components/responses/ServerError'

  /todos/{todoId}:
    get:
      summary: Get a specific todo
      parameters:
        - $ref: '#/components/parameters/TodoId'
      responses:
        '200':
          description: The requested todo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '404':
          description: Todo not found
        '500':
          $ref: '#/components/responses/ServerError'

    put:
      summary: Update a todo
      parameters:
        - $ref: '#/components/parameters/TodoId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoInput'
      responses:
        '200':
          description: Todo updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      summary: Delete a todo
      parameters:
        - $ref: '#/components/parameters/TodoId'
      responses:
        '204':
          description: Todo deleted
        '500':
          $ref: '#/components/responses/ServerError'

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization

    BasicAuth:
      type: http
      scheme: basic

  parameters:
    ProjectId:
      name: projectId
      in: path
      required: true
      schema:
        type: string
      description: The ID of the project

    TodoId:
      name: todoId
      in: path
      required: true
      schema:
        type: string
      description: The ID of the todo

  responses:
    ServerError:
      description: Unexpected server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  schemas:
    Project:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        createdAt:
          type: string
          format: date-time

    ProjectInput:
      type: object
      required:
        - name
      properties:
        name:
          type: string

    Todo:
      type: object
      properties:
        id:
          type: string
        projectId:
          type: string
        title:
          type: string
        completed:
          type: boolean
        dueDate:
          type: string
          format: date
        createdAt:
          type: string
          format: date-time

    TodoInput:
      type: object
      required:
        - title
      properties:
        title:
          type: string
        completed:
          type: boolean
        dueDate:
          type: string
          format: date

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: Internal server error

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
